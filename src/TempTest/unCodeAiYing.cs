using System;
using System.Collections.Generic;
using System.Text;
using System.Drawing;

namespace TempTest
{
    class unCodeAiYing : UnCodebase
    {
        //字符表 顺序为0..9,A..Z,a..z
        string[] CodeArray = new string[] {
"001100010010100001100001100001100001100001100001010010001100",
"00100011001010000100001000010000100001000010011111",
"011110100001100001000001000110001000010000100000100000111111",
"011110100001100001000001001110000001000001100001100001011110",
"000010000110001010010010100010100010111111000010000010000010",
"111111100000100000100000111110000001000001000001100001011110",
"001110010000100000100000111110100001100001100001100001011110",
"111111000001000001000010000010000010000100000100000100000100",
"011110100001100001100001011110100001100001100001100001011110",
"011110100001100001100001011111000001000001000001000010011100",
"001100010010100001100001100001111111100001100001100001100001",
"111110100001100001100001111110100001100001100001100001111110",
"011110100001100000100000100000100000100000100000100001011110",
"111100100010100001100001100001100001100001100001100010111100",
"111111100000100000100000111110100000100000100000100000111111",
"111111100000100000100000111110100000100000100000100000100000",
"011110100001100000100000100000100111100001100001100011011101",
"100001100001100001100001111111100001100001100001100001100001",
"11111001000010000100001000010000100001000010011111",
"000111000010000010000010000010000010000010100010100010011100",
"100001100010100100101000110000110000101000100100100010100001",
"100000100000100000100000100000100000100000100000100000111111",
"1000001110001111000111010101101010110010011001001100000110000011000001",
"100001110001110001101001101001100101100101100011100011100001",
"011110100001100001100001100001100001100001100001100001011110",
"111110100001100001100001111110100000100000100000100000100000",
"01111001000010100001010000101000010100001010000101011010110011001111000000011",
"111110100001100001100001111110100100100010100010100001100001",
"011110100001100001100000011000000110000001100001100001011110",
"1111111000100000010000001000000100000010000001000000100000010000001000",
"100001100001100001100001100001100001100001100001100001011110",
"1000001100000110000010100010010001001000100010100001010000010000001000",
"1000001100000110000011001001100100110010011001001101010110101010100010",
"100001100001010010010010001100001100010010010010100001100001",
"1000001100000101000100100010001010000010000001000000100000010000001000",
"111111000001000001000010000100001000010000100000100000111111",
"011110100001000111011001100001100011011101",
"100000100000100000101110110001100001100001100001110001101110",
"011110100001100000100000100000100001011110",
"000001000001000001011101100011100001100001100001100011011101",
"011110100001100001111111100000100000011110",
"001110010001010000010000111110010000010000010000010000010000",
"000001011101100010100010100010011100010000011110100001100001011110",
"100000100000100000101110110001100001100001100001100001100001",
"00100001000000001100001000010000100001000010011111",
"00001000010000000011000010000100001000010000100001000011001001100",
"100000100000100000100010100100101000111000100100100010100001",
"01100001000010000100001000010000100001000010011111",
"1110110100100110010011001001100100110010011001001",
"101110110001100001100001100001100001100001",
"011110100001100001100001100001100001011110",
"101110110001100001100001100001110001101110100000100000100000",
"011101100011100001100001100001100011011101000001000001000001",
"101110110001100000100000100000100000100000",
"011110100001100000011110000001100001011110",
"001000001000111110001000001000001000001000001000001001000110",
"100001100001100001100001100001100011011101",
"100001100001100001010010010010001100001100",
"1000001100100110010011001001100100110101010100010",
"100001100001010010001100010010100001100001",
"100001100001100001100001100001010011001101000001000010011100",
"111111000010000100001000010000100000111111"
        };

        public unCodeAiYing(Bitmap pic)
            : base(pic)
        {
        }

        public string getPicnum()
        {
            GrayByPixels(); //灰度处理
            GetPicValidByValue(128, 4); //得到有效空间
            Bitmap[] pics = GetSplitPics(1, 4);     //分割

            if (pics.Length != 4)
            {
                return ""; //分割错误
            }
            else  // 重新调整大小
            {
                pics[0] = GetPicValidByValue(pics[0], 128);
                pics[1] = GetPicValidByValue(pics[1], 128);
                pics[2] = GetPicValidByValue(pics[2], 128);
                pics[3] = GetPicValidByValue(pics[3], 128);
            }

            //      if (!textBoxInput.Text.Equals(""))
            string result = "";
            char singleChar = ' ';
            {
                for (int i = 0; i < 4; i++)
                {
                    string code = GetSingleBmpCode(pics[i], 128);   //得到代码串

                    for (int arrayIndex = 0; arrayIndex < CodeArray.Length; arrayIndex++)
                    {
                        if (CodeArray[arrayIndex].Equals(code))  //相等
                        {
                            if (arrayIndex < 10)   // 0..9
                                singleChar = (char)(48 + arrayIndex);
                            else if (arrayIndex < 36) //A..Z
                                singleChar = (char)(65 + arrayIndex - 10);
                            else
                                singleChar = (char)(97 + arrayIndex - 36);
                            result = result + singleChar;
                        }
                    }
                }
            }
            return result;
        }
    }
}
